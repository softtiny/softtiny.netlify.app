<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.38.0 (20140413.2041)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="904pt" height="1217pt"
 viewBox="0.00 0.00 904.00 1217.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1213)">
<title>%3</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-1213 900,-1213 900,4 -4,4"/>
<g id="clust1" class="cluster"><title>cluster_box</title>
<polygon fill="none" stroke="black" stroke-width="0.1" points="8,-8 8,-1201 888,-1201 888,-8 8,-8"/>
</g>
<!-- Example -->
<g id="node1" class="node"><title>Example</title>
<polygon fill="#ccffcc" stroke="black" stroke-width="0.1" points="880,-1193 16,-1193 16,-1157 880,-1157 880,-1193"/>
<text text-anchor="start" x="23" y="-1171.2" font-family="Microsoft YaHei" font-size="16.00">Example &quot;Taskflow API&quot; ETL Pipeline</text>
</g>
<!-- tutorial_taskflow_api_etl -->
<g id="node2" class="node"><title>tutorial_taskflow_api_etl</title>
<polygon fill="#f2f8fe" stroke="black" stroke-width="0.1" points="880,-1156 16,-1156 16,-16 880,-16 880,-1156"/>
<text text-anchor="start" x="23" y="-1079.2" font-family="Microsoft YaHei" font-size="16.00">import json</text>
<text text-anchor="start" x="23" y="-1042.2" font-family="Microsoft YaHei" font-size="16.00">from airflow.decorators import dag, task</text>
<text text-anchor="start" x="23" y="-1024.2" font-family="Microsoft YaHei" font-size="16.00">from airflow.utils.dates import days_ago</text>
<text text-anchor="start" x="23" y="-1006.2" font-family="Microsoft YaHei" font-size="16.00"># These args will get passed on to each operator</text>
<text text-anchor="start" x="23" y="-988.2" font-family="Microsoft YaHei" font-size="16.00"># You can override them on a per&#45;task basis during operator initialization</text>
<text text-anchor="start" x="23" y="-970.2" font-family="Microsoft YaHei" font-size="16.00">default_args = {</text>
<text text-anchor="start" x="23" y="-952.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#39;owner&#39;: &#39;airflow&#39;,</text>
<text text-anchor="start" x="23" y="-934.2" font-family="Microsoft YaHei" font-size="16.00">}</text>
<text text-anchor="start" x="23" y="-916.2" font-family="Microsoft YaHei" font-size="16.00">@dag(default_args=default_args, schedule_interval=None, start_date=days_ago(2), tags=[&#39;example&#39;])</text>
<text text-anchor="start" x="23" y="-898.2" font-family="Microsoft YaHei" font-size="16.00">def tutorial_taskflow_api_etl():</text>
<text text-anchor="start" x="23" y="-880.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-862.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;### TaskFlow API Tutorial Documentation</text>
<text text-anchor="start" x="23" y="-844.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;This is a simple ETL data pipeline example which demonstrates the use of</text>
<text text-anchor="start" x="23" y="-826.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;the TaskFlow API using three simple tasks for Extract, Transform, and Load.</text>
<text text-anchor="start" x="23" y="-808.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;Documentation that goes along with the Airflow TaskFlow API tutorial is</text>
<text text-anchor="start" x="23" y="-790.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;located</text>
<text text-anchor="start" x="23" y="-772.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;[here](https://airflow.apache.org/docs/apache&#45;airflow/stable/tutorial_taskflow_api.html)</text>
<text text-anchor="start" x="23" y="-754.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-736.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;@task()</text>
<text text-anchor="start" x="23" y="-718.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;def extract():</text>
<text text-anchor="start" x="23" y="-700.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-682.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;#### Extract task</text>
<text text-anchor="start" x="23" y="-664.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;A simple Extract task to get data ready for the rest of the data</text>
<text text-anchor="start" x="23" y="-646.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;pipeline. In this case, getting data is simulated by reading from a</text>
<text text-anchor="start" x="23" y="-628.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;hardcoded JSON string.</text>
<text text-anchor="start" x="23" y="-610.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-592.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;data_string = &#39;{&quot;1001&quot;: 301.27, &quot;1002&quot;: 433.21, &quot;1003&quot;: 502.22}&#39;</text>
<text text-anchor="start" x="23" y="-555.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;order_data_dict = json.loads(data_string)</text>
<text text-anchor="start" x="23" y="-537.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return order_data_dict</text>
<text text-anchor="start" x="23" y="-519.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;@task(multiple_outputs=True)</text>
<text text-anchor="start" x="23" y="-501.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;def transform(order_data_dict: dict):</text>
<text text-anchor="start" x="23" y="-483.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-465.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;#### Transform task</text>
<text text-anchor="start" x="23" y="-447.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;A simple Transform task which takes in the collection of order data and</text>
<text text-anchor="start" x="23" y="-429.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;computes the total order value.</text>
<text text-anchor="start" x="23" y="-411.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-393.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;total_order_value = 0</text>
<text text-anchor="start" x="23" y="-356.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for value in order_data_dict.values():</text>
<text text-anchor="start" x="23" y="-338.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_order_value += value</text>
<text text-anchor="start" x="23" y="-301.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return {&quot;total_order_value&quot;: total_order_value}</text>
<text text-anchor="start" x="23" y="-283.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;@task()</text>
<text text-anchor="start" x="23" y="-265.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;def load(total_order_value: float):</text>
<text text-anchor="start" x="23" y="-247.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-229.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;#### Load task</text>
<text text-anchor="start" x="23" y="-211.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;A simple Load task which takes in the result of the Transform task and</text>
<text text-anchor="start" x="23" y="-193.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;instead of saving it to end user review, just prints it out.</text>
<text text-anchor="start" x="23" y="-175.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;&quot;&quot;</text>
<text text-anchor="start" x="23" y="-138.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;print(f&quot;Total order value is: {total_order_value:.2f}&quot;)</text>
<text text-anchor="start" x="23" y="-120.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;order_data = extract()</text>
<text text-anchor="start" x="23" y="-102.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;order_summary = transform(order_data)</text>
<text text-anchor="start" x="23" y="-84.2" font-family="Microsoft YaHei" font-size="16.00"> &#160;&#160;&#160;load(order_summary[&quot;total_order_value&quot;])</text>
<text text-anchor="start" x="23" y="-66.2" font-family="Microsoft YaHei" font-size="16.00">tutorial_etl_dag = tutorial_taskflow_api_etl()</text>
</g>
</g>
</svg>
